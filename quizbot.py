import random
import telebot
from telebot import types

TOKEN = '7723306001:AAFuh2Rhbx-Nr63k7m0dnfXS8ImFL8rJF8I'
bot = telebot.TeleBot(TOKEN)

# Create a single instance of QuizBot
quiz_bot = None

class QuizBot:
    def __init__(self):
        self.questions = {
            'etiquette': [
                {
                    'question': 'üçΩ –ö–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞ —Å—Ç–æ–ª–æ–º –±—ã–ª–∏ –≤–∞–∂–Ω—ã –≤ –ø–µ—Ç—Ä–æ–≤—Å–∫—É—é —ç–ø–æ—Ö—É?',
                    'options': [
                        '–ß–∞–≤–∫–∞—Ç—å –∏ —à—É–º–µ—Ç—å –∑–∞ —Å—Ç–æ–ª–æ–º',
                        '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–æ–ª–æ–≤—ã–µ –ø—Ä–∏–±–æ—Ä—ã',
                        '–ù–µ —á–∞–≤–∫–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–æ–ª–æ–≤—ã–µ –ø—Ä–∏–±–æ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ',
                        '–ï—Å—Ç—å —Ä—É–∫–∞–º–∏ –≤—Å–µ –±–ª—é–¥–∞'
                    ],
                    'correct': 2,
                    'explanation': 'üéØ –í –ø–µ—Ç—Ä–æ–≤—Å–∫—É—é —ç–ø–æ—Ö—É –±—ã–ª–æ –≤–∞–∂–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —ç—Ç–∏–∫–µ—Ç–∞ –∑–∞ —Å—Ç–æ–ª–æ–º, –≤–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–æ–≤—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —à—É–º–∞ –ø—Ä–∏ –µ–¥–µ.'
                },
                {
                    'question': 'üë• –ö–∞–∫–∏–µ —Å–≤–µ—Ç—Å–∫–∏–µ –º–∞–Ω–µ—Ä—ã –±—ã–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –≤ –æ–±—â–µ—Å—Ç–≤–µ?',
                    'options': [
                        '–ì–æ–≤–æ—Ä–∏—Ç—å –≥—Ä—É–±–æ –∏ –¥–µ—Ä–∑–∫–æ',
                        '–ì–æ–≤–æ—Ä–∏—Ç—å —É—á—Ç–∏–≤–æ –∏ –¥–µ—Ä–∂–∞—Ç—å –æ—Å–∞–Ω–∫—É –ø—Ä—è–º–æ',
                        '–°—É—Ç—É–ª–∏—Ç—å—Å—è –∏ —à–µ–ø—Ç–∞—Ç—å',
                        '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞'
                    ],
                    'correct': 1,
                    'explanation': 'üéØ –°–≤–µ—Ç—Å–∫–∏–µ –º–∞–Ω–µ—Ä—ã –≤–∫–ª—é—á–∞–ª–∏ –≤–µ–∂–ª–∏–≤—É—é —Ä–µ—á—å –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—Å–∞–Ω–∫—É –∫–∞–∫ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ö–æ—Ä–æ—à–µ–≥–æ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è.'
                }
            ],
            'assemblies': [
                {
                    'question': 'üé≠ –ö–æ–≥–¥–∞ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –∞—Å—Å–∞–º–±–ª–µ–∏ –ü–µ—Ç—Ä–æ–º I?',
                    'options': [
                        '–í 1700 –≥–æ–¥—É',
                        '–í 1718 –≥–æ–¥—É',
                        '–í 1725 –≥–æ–¥—É',
                        '–í 1710 –≥–æ–¥—É'
                    ],
                    'correct': 1,
                    'explanation': 'üéØ –ê—Å—Å–∞–º–±–ª–µ–∏ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –ü–µ—Ç—Ä–æ–º I –≤ 1718 –≥–æ–¥—É –∫–∞–∫ –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞ —Å–≤–µ—Ç—Å–∫–æ–π –∂–∏–∑–Ω–∏.'
                },
                {
                    'question': 'üíÉ –ß—Ç–æ –±—ã–ª–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ –≤ –∞—Å—Å–∞–º–±–ª–µ—è—Ö –ø–µ—Ç—Ä–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏?',
                    'options': [
                        '–¢–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω—ã –º–æ–≥–ª–∏ –∏—Ö –ø–æ—Å–µ—â–∞—Ç—å',
                        '–û–Ω–∏ –±—ã–ª–∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤',
                        '–ú—É–∂—á–∏–Ω—ã –∏ –∂–µ–Ω—â–∏–Ω—ã –º–æ–≥–ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ –æ–±—â–∞—Ç—å—Å—è',
                        '–û–Ω–∏ –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –≤ —Ü–µ—Ä–∫–≤—è—Ö'
                    ],
                    'correct': 2,
                    'explanation': 'üéØ –í–ø–µ—Ä–≤—ã–µ –Ω–∞ –∞—Å—Å–∞–º–±–ª–µ—è—Ö –º—É–∂—á–∏–Ω—ã –∏ –∂–µ–Ω—â–∏–Ω—ã –º–æ–≥–ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ –æ–±—â–∞—Ç—å—Å—è, —á—Ç–æ –±—ã–ª–æ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º –¥–ª—è —Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.'
                }
            ],
            'clothing': [
                {
                    'question': 'üëî –ß—Ç–æ –≤—Ö–æ–¥–∏–ª–æ –≤ –º—É–∂—Å–∫–æ–π –∫–æ—Å—Ç—é–º –ø–µ—Ç—Ä–æ–≤—Å–∫–æ–π —ç–ø–æ—Ö–∏?',
                    'options': [
                        '–ö–∞—Ñ—Ç–∞–Ω, –∫–∞–º–∑–æ–ª –∏ –∫—é–ª–æ—Ç—ã',
                        '–°–∞—Ä–∞—Ñ–∞–Ω –∏ –∫–æ–∫–æ—à–Ω–∏–∫',
                        '–î–∂–∏–Ω—Å—ã –∏ —Ñ—É—Ç–±–æ–ª–∫–∞',
                        '–¢–æ–≥–∞ –∏ —Å–∞–Ω–¥–∞–ª–∏–∏'
                    ],
                    'correct': 0,
                    'explanation': 'üéØ –ú—É–∂—Å–∫–æ–π –∫–æ—Å—Ç—é–º —Å–æ—Å—Ç–æ—è–ª –∏–∑ –∫–∞—Ñ—Ç–∞–Ω–∞ (–¥–ª–∏–Ω–Ω–æ–≥–æ –ø—Ä–∏—Ç–∞–ª–µ–Ω–Ω–æ–≥–æ —Å—é—Ä—Ç—É–∫–∞), –∫–∞–º–∑–æ–ª–∞ –∏ –∫—é–ª–æ—Ç–æ–≤ (–∫–æ—Ä–æ—Ç–∫–∏—Ö —à—Ç–∞–Ω–æ–≤ –¥–æ –∫–æ–ª–µ–Ω).'
                },
                {
                    'question': 'üëó –ö–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ö–æ–¥–∏–ª–∏ –≤ –∂–µ–Ω—Å–∫–∏–π –∫–æ—Å—Ç—é–º –ø–µ—Ç—Ä–æ–≤—Å–∫–æ–π —ç–ø–æ—Ö–∏?',
                    'options': [
                        '–î–∂–∏–Ω—Å—ã –∏ –±–ª—É–∑–∫–∞',
                        '–°–∞—Ä–∞—Ñ–∞–Ω –∏ –ª–∞–ø—Ç–∏',
                        '–†–æ–±—Ä–æ–Ω, –∫–æ—Ä—Å–µ—Ç –∏ –ø—ã—à–Ω–∞—è —é–±–∫–∞',
                        '–ë—Ä—é–∫–∏ –∏ –ø–∏–¥–∂–∞–∫'
                    ],
                    'correct': 2,
                    'explanation': 'üéØ –ñ–µ–Ω—Å–∫–∏–π –∫–æ—Å—Ç—é–º –≤–∫–ª—é—á–∞–ª —Ä–æ–±—Ä–æ–Ω (–ø—ã—à–Ω–æ–µ –ø–ª–∞—Ç—å–µ –Ω–∞ –∫–∞—Ä–∫–∞—Å–µ), –∫–æ—Ä—Å–µ—Ç –∏ –ø—ã—à–Ω—É—é —é–±–∫—É –Ω–∞ –∫–∞—Ä–∫–∞—Å–µ (–ø–∞–Ω—å–µ).'
                }
            ],
            'calendar': [
                {
                    'question': 'üìÖ –í –∫–∞–∫–æ–º –≥–æ–¥—É –ü–µ—Ç—Ä I –∏–∑–¥–∞–ª —É–∫–∞–∑ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –Ω–æ–≤–æ–µ –ª–µ—Ç–æ–∏—Å—á–∏—Å–ª–µ–Ω–∏–µ?',
                    'options': [
                        '–í 1700 –≥–æ–¥—É',
                        '–í 1699 –≥–æ–¥—É',
                        '–í 1701 –≥–æ–¥—É',
                        '–í 1695 –≥–æ–¥—É'
                    ],
                    'correct': 1,
                    'explanation': 'üéØ –£–∫–∞–∑ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –Ω–æ–≤–æ–µ –ª–µ—Ç–æ–∏—Å—á–∏—Å–ª–µ–Ω–∏–µ –±—ã–ª –∏–∑–¥–∞–Ω –≤ 1699 –≥–æ–¥—É.'
                },
                {
                    'question': 'üìÜ –ö–∞–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ø—Ä–∏ –ü–µ—Ç—Ä–µ I?',
                    'options': [
                        '–ì–æ–¥ —Å—Ç–∞–ª –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è 1 –º–∞—Ä—Ç–∞',
                        '–ì–æ–¥ —Å—Ç–∞–ª –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è 1 —è–Ω–≤–∞—Ä—è –≤–º–µ—Å—Ç–æ 1 —Å–µ–Ω—Ç—è–±—Ä—è',
                        '–ì–æ–¥ —Å—Ç–∞–ª –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è 1 –¥–µ–∫–∞–±—Ä—è',
                        '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'
                    ],
                    'correct': 1,
                    'explanation': 'üéØ –ü—Ä–∏ –ü–µ—Ç—Ä–µ I –Ω–∞—á–∞–ª–æ–º –≥–æ–¥–∞ —Å—Ç–∞–ª–æ 1 —è–Ω–≤–∞—Ä—è –≤–º–µ—Å—Ç–æ 1 —Å–µ–Ω—Ç—è–±—Ä—è, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–æ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π —Ç—Ä–∞–¥–∏—Ü–∏–∏.'
                }
            ]
        }
        self.current_questions = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    global quiz_bot
    quiz_bot = QuizBot()
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    start_button = types.KeyboardButton('üéØ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É')
    help_button = types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å')
    markup.add(start_button, help_button)
    
    welcome_text = """
üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É "–ë—ã—Ç –ø–µ—Ç—Ä–æ–≤—Å–∫–æ–π —ç–ø–æ—Ö–∏"!*

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏ –ø—Ä–∏ –ü–µ—Ç—Ä–µ I (1682-1725).

–¢–µ–º—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:
üìö –≠—Ç–∏–∫–µ—Ç
üé≠ –ê—Å—Å–∞–º–±–ª–µ–∏
üëî –û–¥–µ–∂–¥–∞
üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å

–ù–∞–∂–º–∏—Ç–µ "üéØ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É" —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å!
"""
    bot.reply_to(message, welcome_text, parse_mode='Markdown', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '‚ùì –ü–æ–º–æ—â—å')
def help_message(message):
    help_text = """
*–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É:*

1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üéØ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"
2Ô∏è‚É£ –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å
3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å!

–£–¥–∞—á–∏! üçÄ
"""
    bot.reply_to(message, help_text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == 'üéØ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É')
def start_quiz(message):
    global quiz_bot
    if not quiz_bot:
        quiz_bot = QuizBot()
    
    categories = list(quiz_bot.questions.keys())
    category = random.choice(categories)
    question = random.choice(quiz_bot.questions[category])
    quiz_bot.current_questions[message.from_user.id] = question
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    for i, option in enumerate(question['options']):
        button = types.InlineKeyboardButton(
            text=f"{['A', 'B', 'C', 'D'][i]}. {option}", 
            callback_data=f"answer_{i}"
        )
        markup.add(button)
    
    bot.send_message(
        message.chat.id,
        f"*{question['question']}*",
        parse_mode='Markdown',
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
def handle_answer(call):
    global quiz_bot
    if not quiz_bot:
        quiz_bot = QuizBot()
        
    try:
        user_id = call.from_user.id
        answer_index = int(call.data.split('_')[1])
        current_question = quiz_bot.current_questions.get(user_id)
        
        if current_question:
            is_correct = answer_index == current_question['correct']
            if is_correct:
                response = "‚ú® *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!* üéâ\n\n"
            else:
                correct_answer = current_question['options'][current_question['correct']]
                response = f"‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ*\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n\n"
            
            response += current_question['explanation']
            response += "\n\nüîÑ –ù–∞–∂–º–∏—Ç–µ 'üéØ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É' –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!"
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=response,
                parse_mode='Markdown'
            )
            
            # Answer the callback query to remove the "loading" state
            bot.answer_callback_query(call.id)
    except Exception as e:
        print(f"Error handling answer: {e}")
        bot.answer_callback_query(call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ.")

if __name__ == "__main__":
    quiz_bot = QuizBot()
    bot.infinity_polling() 